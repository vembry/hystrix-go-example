// Code generated by mockery 2.9.4. DO NOT EDIT.

package mock

import (
	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// HttpClient is an autogenerated mock type for the HttpClient type
type HttpClient struct {
	mock.Mock
}

// Delete provides a mock function with given fields: url, headers
func (_m *HttpClient) Delete(url string, headers http.Header) (*http.Response, error) {
	ret := _m.Called(url, headers)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string, http.Header) *http.Response); ok {
		r0 = rf(url, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, http.Header) error); ok {
		r1 = rf(url, headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Do provides a mock function with given fields: httpMethod, path, header, body
func (_m *HttpClient) Do(httpMethod string, path string, header http.Header, body io.Reader) (*http.Response, error) {
	ret := _m.Called(httpMethod, path, header, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string, string, http.Header, io.Reader) *http.Response); ok {
		r0 = rf(httpMethod, path, header, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, http.Header, io.Reader) error); ok {
		r1 = rf(httpMethod, path, header, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: url, headers
func (_m *HttpClient) Get(url string, headers http.Header) (*http.Response, error) {
	ret := _m.Called(url, headers)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string, http.Header) *http.Response); ok {
		r0 = rf(url, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, http.Header) error); ok {
		r1 = rf(url, headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Post provides a mock function with given fields: path, headers, body
func (_m *HttpClient) Post(path string, headers http.Header, body io.Reader) (*http.Response, error) {
	ret := _m.Called(path, headers, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string, http.Header, io.Reader) *http.Response); ok {
		r0 = rf(path, headers, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, http.Header, io.Reader) error); ok {
		r1 = rf(path, headers, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: url, headers, body
func (_m *HttpClient) Put(url string, headers http.Header, body io.Reader) (*http.Response, error) {
	ret := _m.Called(url, headers, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string, http.Header, io.Reader) *http.Response); ok {
		r0 = rf(url, headers, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, http.Header, io.Reader) error); ok {
		r1 = rf(url, headers, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
